#!/usr/bin/env perl
# vim:tw=80
#------------------------------------------------------------------------------
# User: 00riddle00 (Tomas Giedraitis)
# Date: 2025-05-04 23:12:12 EEST
# Path: ~/.local/bin/i3blocks/mediaplayer
# URL:  https://github.com/00riddle00/dotfiles
#------------------------------------------------------------------------------
# Author: Tony Crisci (https://github.com/acrisci), Thiago Perrotta (https://github.com/thiagowfx)
# Orig. URL: https://raw.githubusercontent.com/vivien/i3blocks-contrib/874ed323dbcc3caee454ddf9c03fb8c98de42462/mediaplayer/mediaplayer
# Orig. URL/File Retrieval: 2024-09-30 12:42:22 EEST
#------------------------------------------------------------------------------
#*
# Show currently playing song.
#
# Left click to go to previous song, middle click to pause/play, right click to
# go to next song. Scroll up to increase volume, scroll down to decrease
# volume.
#
# ----------------------------------------
# Description by the author:
# ----------------------------------------
# Copyright (C) 2014 Tony Crisci <tony@dubstepdish.com>
# Copyright (C) 2015 Thiago Perrotta <perrotta dot thiago at poli dot ufrj dot br>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# For all media players except mpd/cmus/rhythmbox, MPRIS support should be
# enabled and the playerctl binary should be in your path.
# See https://github.com/acrisci/playerctl
#
# Set instance=NAME in the i3blocks configuration to specify a music player
# (playerctl will attempt to connect to org.mpris.MediaPlayer2.[NAME] on your
# DBus session). If instance is empty, playerctl will connect to the first
# supported media player it finds.
# ----------------------------------------
#**

#* USAGE:
#*   ${0}
#*
#*   The script is designed to be run by i3blocks status bar manager, but can
#*   be run from the terminal as well.
#**
use Time::HiRes qw(usleep);
use Env qw(BLOCK_INSTANCE);

# Delay in ms to let network-based players (spotify) reflect new data.
use constant DELAY => 50;
use constant SPOTIFY_STR => 'spotify';

my @metadata = ();
my $player_arg = "";

if ($BLOCK_INSTANCE) {
    $player_arg = "--player='${BLOCK_INSTANCE}'";
} else {
    my $pid = `ps -C cmus -o pid=`;
    if ($pid) {
        $player_arg = "--player='cmus'";
    } else {
        $pid = `ps -C spotify -o pid=`;
        if ($pid) {
            $player_arg = "--player='spotify'";
        }
    }
}

sub buttons {
    my $method = shift;

    # The ${BLOCK_BUTTON} value is set by i3blocks, its values correspond to
    # these mouse actions:
    #   1 - left click
    #   2 - middle click
    #   3 - right click
    #   4 - scroll up
    #   5 - scroll down
    if($method eq 'mpd') {
        if ($ENV{'BLOCK_BUTTON'} == 1) {
            system("mpc prev &>/dev/null");
        } elsif ($ENV{'BLOCK_BUTTON'} == 2) {
            system("mpc toggle &>/dev/null");
        } elsif ($ENV{'BLOCK_BUTTON'} == 3) {
            system("mpc next &>/dev/null");
        } elsif ($ENV{'BLOCK_BUTTON'} == 4) {
            system("mpc volume +10 &>/dev/null");
        } elsif ($ENV{'BLOCK_BUTTON'} == 5) {
            system("mpc volume -10 &>/dev/null");
        }
    } elsif ($method eq 'cmus') {
        if ($ENV{'BLOCK_BUTTON'} == 1) {
            system("cmus-remote --prev");
        } elsif ($ENV{'BLOCK_BUTTON'} == 2) {
            system("cmus-remote --pause");
        } elsif ($ENV{'BLOCK_BUTTON'} == 3) {
            system("cmus-remote --next");
        }
    } elsif ($method eq 'playerctl') {
        if ($ENV{'BLOCK_BUTTON'} == 1) {
            system("playerctl ${player_arg} previous");
            usleep(DELAY * 1000) if $BLOCK_INSTANCE eq SPOTIFY_STR;
        } elsif ($ENV{'BLOCK_BUTTON'} == 2) {
            system("playerctl ${player_arg} play-pause");
        } elsif ($ENV{'BLOCK_BUTTON'} == 3) {
            system("playerctl ${player_arg} next");
            usleep(DELAY * 1000) if $BLOCK_INSTANCE eq SPOTIFY_STR;
        } elsif ($ENV{'BLOCK_BUTTON'} == 4) {
            system("playerctl ${player_arg} volume 0.01+");
        } elsif ($ENV{'BLOCK_BUTTON'} == 5) {
            system("playerctl ${player_arg} volume 0.01-");
        }
    } elsif ($method eq 'rhythmbox') {
        if ($ENV{'BLOCK_BUTTON'} == 1) {
            system("rhythmbox-client --previous");
        } elsif ($ENV{'BLOCK_BUTTON'} == 2) {
            system("rhythmbox-client --play-pause");
        } elsif ($ENV{'BLOCK_BUTTON'} == 3) {
            system("rhythmbox-client --next");
        }
    }
}

sub cmus {
    my @cmus = split /^/, qx(cmus-remote -Q);
    if ($? == 0) {
        foreach my $line (@cmus) {
            my @data = split /\s/, $line;
            my $item = shift @data;
            if ($item eq 'tag') {
                my $key = shift @data;
                my $value = join ' ', @data;

                @metadata[0] = $value if $key eq 'artist';
                @metadata[1] = $value if $key eq 'title';
            } elsif ($item eq 'file') {
                my @path = split /\//, $line;
                my $song = pop @path;
                # strip file extension
                $song =~ s{\.[^.]+$}{};
                @metadata[0] = $song;
            }
        }

        if (@metadata) {
            buttons('cmus');

            # Metadata found so we are done.
            print(join ' - ', @metadata);
            print("\n");
            exit 0;
        }
    }
}

sub mpd {
    my $data = qx(mpc current);
    if (not $data eq '') {
        buttons("mpd");
        print($data);
        exit 0;
    }
}

sub playerctl {
    buttons('playerctl');

    my $artist = qx(playerctl ${player_arg} metadata artist 2>/dev/null);
    chomp $artist;
    # Exit status will be nonzero when playerctl cannot find your player.
    exit(0) if $? || $artist eq '(null)';

    push(@metadata, $artist) if $artist;

    my $title = qx(playerctl ${player_arg} metadata title);
    exit(0) if $? || $title eq '(null)';

    push(@metadata, $title) if $title;

    print(join(" - ", @metadata)) if @metadata;
}

sub rhythmbox {
    buttons('rhythmbox');

    my $data = qx(rhythmbox-client --print-playing --no-start);
    print($data);
}

if ($player_arg =~ /mpd/) {
    mpd;
}
elsif ($player_arg =~ /cmus/) {
    cmus;
}
elsif ($player_arg =~ /rhythmbox/) {
    rhythmbox;
}
else {
    playerctl;
}
print("\n");
