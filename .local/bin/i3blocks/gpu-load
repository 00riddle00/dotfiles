#!/usr/bin/env perl
# vim:tw=80
#------------------------------------------------------------------------------
# User: 00riddle00 (Tomas Giedraitis)
# Date: 2025-05-15 19:43:38 EEST
# Path: ~/.local/bin/i3blocks/gpu-load
# URL:  https://github.com/00riddle00/dotfiles
#------------------------------------------------------------------------------
# Author: merspieler (https://github.com/merspieler), kb100 (https://github.com/kb100), Adhika Setya Pramudita (https://github.com/adhikasp)
# Orig. URL: https://raw.githubusercontent.com/vivien/i3blocks-contrib/f80389bf76dac31f634636751e6f0ae3ee6caf38/gpu-load/gpu-load
# Orig. URL/File Retrieval: 2024-09-30 09:38:45 EEST
#------------------------------------------------------------------------------
#*
# Show GPU load, detecting the GPU brand (NVIDIA, AMD, or Intel).
#
# ----------------------------------------
# Description by the author:
# ----------------------------------------
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------
#**

#* USAGE:
#*   ${0}
#*
#*   The script is designed to be run by i3blocks status bar manager, but can
#*   be run from the terminal as well.
#**
use strict;
use warnings;
use utf8;
use Getopt::Long;

# Default values.
my $gpu_usage = -1;
my $gpu_mem = -1;
my $gpu_video = -1;
my $gpu_pcie = -1;
# These values come from the i3blocks config file:
my $t_warn = $ENV{T_WARN} || 70;
my $t_crit = $ENV{T_CRIT} || 90;
my $verbose = $ENV{VERBOSE} || 0;

my $gpu_brand = "";
my $full_text = "";

sub help {
    print "Usage: gpu-load [-w <warning>] [-c <critical>]\n";
    print "-w <percent>: warning threshold to become amber\n";
    print "-c <percent>: critical threshold to become red\n";
    exit 0;
}

GetOptions("help|h" => \&help,
           "w=i"    => \$t_warn,
           "c=i"    => \$t_crit);

# Auto-detect the GPU brand using lspci.
open (LSPCI, 'lspci | rg -i "VGA|3D|Display" |')
    or die 'Cannot run lspci';
my $lspci_output = do { local $/; <LSPCI> };
close(LSPCI);

if ($lspci_output =~ /nvidia/i) {
    open (NVS, 'nvidia-smi --query-gpu=utilization.gpu,utilization.memory --format=csv,noheader,nounits |') or die;
    if (defined(my $line = <NVS>)) {
        ($gpu_usage, $gpu_mem) = split /\s*,\s*/, $line;
    }
    close(NVS);
    $full_text = sprintf "%.0f%% %.0f%%\n", $gpu_usage, $gpu_mem;
} elsif ($lspci_output =~ /amd/i || $lspci_output =~ /radeon/i) {
    open (AMD, 'radeontop -d - -l 1 |') or die;
    while (<AMD>) {
        if (/^.*[gpu] (\d+)\.\d+%.*.*[vram] (\d+)\.\d+%.*$/) {
            $gpu_usage = $1;
            $gpu_mem = $2;
            last;
        }
    }
    close(AMD);
    $full_text = sprintf "%.0f%% %.0f%%\n", $gpu_usage, $gpu_mem;
} elsif ($lspci_output =~ /intel/i) {
    open (INTEL, 'timeout 0.1 intel_gpu_top -J |') or die;
    my $json_output = do { local $/; <INTEL> };  # Read all output
    close(INTEL);

    # Parse JSON output (Intel output is in JSON format).
    if ($json_output =~ /"busy":\s*([\d.]+),/) {
        $gpu_usage = $1;
    }
    $full_text = sprintf "%.0f%%\n", $gpu_usage;
} else {
    die "Unsupported GPU brand or unable to detect GPU.";
}

# If no GPU usage data was found, exit with error.
$gpu_usage == -1 and die 'Can\'t find GPU information';

# Print full_text or short_text.
if ($verbose) {
    print $full_text;
} else {
    printf "%.0f%%\n", $gpu_usage;
}

# Print color, if needed.
if ($gpu_usage >= $t_crit || $gpu_mem >= $t_crit ||
    $gpu_video >= $t_crit || $gpu_pcie >= $t_crit) {
    print "#FF0000\n";
    exit 33;
} elsif ($gpu_usage >= $t_warn || $gpu_mem >= $t_warn ||
         $gpu_video >= $t_warn || $gpu_pcie >= $t_warn) {
    print "#FFBF00\n";
}
