#!/usr/bin/env perl
# vim:tw=80
#------------------------------------------------------------------------------
# User: 00riddle00 (Tomas Giedraitis)
# Date: 2025-06-17 13:22:05 EEST
# Path: ~/.local/bin/i3blocks/battery
# URL:  https://github.com/00riddle00/dotfiles
#------------------------------------------------------------------------------
# Author: Pierre Mavro (https://github.com/deimosfr), Vivien Didelot (https://github.com/vivien)
# Orig. URL: https://raw.githubusercontent.com/vivien/i3blocks-contrib/485637623e80a9922328b30d0ec5e8bc14441f15/battery/battery
# Orig. URL/File Retrieval: 2024-09-30 11:19:54 EEST
#------------------------------------------------------------------------------
#*
# Show battery status, with colors based on charge level.
#
# ----------------------------------------
# Description by the author:
# ----------------------------------------
# Copyright 2014 Pierre Mavro <deimos@deimos.fr>
# Copyright 2014 Vivien Didelot <vivien@didelot.org>
#
# Licensed under the terms of the GNU GPL v3, or any later version.
#
# This script is meant to use with i3blocks. It parses the output of the "acpi"
# command (often provided by a package of the same name) to read the status of
# the battery, and eventually its remaining time (to full charge or discharge).
#
# The color will gradually change for a percentage below 85%, and the urgency
# (exit code 33) is set if there is less that 5% remaining.
#------------------------------------------------------------------------------
#**

#* USAGE:
#*   ${0}
#*
#*   The script is designed to be run by i3blocks status bar manager, but can
#*   be run from the terminal as well.
#**
use strict;
use warnings;
use utf8;

binmode(STDOUT, ":utf8");

my $acpi;
my $status;
my $percent;
my $ac_adapt;
my $full_text;
my $short_text;
my $label;
# This value comes from the i3blocks config file.
my $bat_number = $ENV{BAT_NUMBER} || 0;

# Read the first line of the "acpi" command output.
open (ACPI, "acpi -b 2>/dev/null| rg 'Battery ${bat_number}' |") or die;
$acpi = <ACPI>;
close(ACPI);

# Fail on unexpected output.
if (not defined($acpi)) {
    # Don't print anything to stderr if there is no battery.
    exit(0);
}
elsif ($acpi !~ /: ([\w\s]+), (\d+)%/) {
    die "${acpi}\n";
}

$status = $1;
$percent = $2;

# Set label based on battery charge.
if ($percent < 15) {
    $label = "";
} elsif ($percent < 25) {
    $label = "";
} elsif ($percent < 40) {
    $label = "";
} elsif ($percent < 60) {
    $label = "";
} else {
    $label = "";
}

$full_text = "${label}  ${percent}%";
$short_text = $full_text;

if ($status eq 'Discharging') {
    $full_text .= ' DIS';
} elsif ($status eq 'Charging') {
    $full_text .= ' CHR';
} elsif ($status eq 'Unknown') {
    open (AC_ADAPTER, "acpi -a |") or die;
    $ac_adapt = <AC_ADAPTER>;
    close(AC_ADAPTER);

    if ($ac_adapt =~ /: ([\w-]+)/) {
        $ac_adapt = $1;

        if ($ac_adapt eq 'on-line') {
            $full_text .= ' CHR';
        } elsif ($ac_adapt eq 'off-line') {
            $full_text .= ' DIS';
        }
    }
}

if ($acpi =~ /(\d\d:\d\d):/) {
    $full_text .= " ($1)";
}

# Print text.
#print "${full_text}\n";
print "${short_text}\n";

# Consider color and urgent flag only on discharge.
if ($status eq 'Discharging') {

    if ($percent < 25) {
        print "#EF6191\n";
    } elsif ($percent < 40) {
        print "#FFAE00\n";
    } elsif ($percent < 60) {
        print "#B967C7\n";
    } else {
        print "#06989A\n";
    }

    if ($percent < 15) {
        exit(33);
    }
}

exit(0);
